#Program07
import numpy as np
import matplotlib.pyplot as plt

class LVQ:
    def __init__(self,input_size,output_size,learning_rate=0.1):
        self.input_size= input_size
        self.output_size= output_size
        self.learning_rate=learning_rate
        self.weights = np.random.rand(input_size,output_size) 
        
    def find_winner(self,data_point):
        return np.argmin(np.linalg.norm(self.weights - data_point,axis=1))
    
    def update_weights(self,data_point,winner_index,target):
        self.weights[winner_index] += self.learning_rate*(data_point - self.weights[winner_index])
        
    def train(self,data,targets,epochs=100):
        for _ in range(epochs):
            for data_point, target in zip(data,targets):
                winner_index = self.find_winner(data_point)
                self.update_weights(data_point,winner_index,target)
                
    def predict(self,data):
        return np.argmin(np.linalg.norm(self.weights[:,np.newaxis] - data,axis=2),axis=0)
    
np.random.seed(42)
class_0 = np.random.rand(50,2)*0.5
class_1 = 0.5+np.random.rand(50,2)*0.5
data = np.concatenate((class_0,class_1))
labels = np.concatenate((np.zeros(50),np.ones(50)))
lvq_model = LVQ(input_size=2,output_size=2,learning_rate=0.1)
lvq_model.train(data,labels,epochs=1000)
test_data = np.random.rand(10,2)
predictions = lvq_model.predict(test_data)

plt.scatter(class_0[:, 0], class_0[:, 1], color='blue', label='class0')
plt.scatter(class_1[:, 0], class_1[:, 1], color='red', label='class1')
plt.scatter(test_data[:, 0], test_data[:, 1], color='green', marker='*', label='testdata')
plt.scatter(lvq_model.weights[:, 0], lvq_model.weights[:, 1], color='black', marker='o', s=100)
  
plt.title('LVQ Classification')
plt.legend()
plt.show()
